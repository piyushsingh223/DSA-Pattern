In this type of question we use prefix sum and there are 3 things we do :- 

1. if the prefix sum is equal to target that means a subaaray starting from 0th index is found .
2. next we check if prefix sum - target is already present in the map , this means a subaaray satisfying the condition is found.
3 . The most important thing is that we store only the first occurence of the every prefixsum in the map , so that we always get the longest subarray.

int longestSubarray(vector<int>& arr, int k) {
        // code here
        int n=arr.size();
        unordered_map<int,int> m;
        int presum=0,ans=0;
        for(int i=0;i<n;i++){
            presum+=arr[i];
            if(presum==k) ans=max(ans,i+1);
            
            if(m.find(presum-k)!=m.end()){
                ans=max(ans,i-m[presum-k]);
            }
            
            if(m.find(presum)==m.end()){
                m[presum]=i;
            }
        }
        return ans;
}



Similar approach is used for question Largest subarray of 0's and 1's :- 

here we add -1 to the prefix sum when we encounter 0 , so now question becomes largest subaaray having sum 0.

int maxLen(vector<int> &arr) {
        // Your code here
        int n=arr.size();
        unordered_map<int,int> m;
        int presum=0,ans=0;
        for(int i=0;i<n;i++){
            if(arr[i]==0) presum+=-1;
            else presum+=1;
            
            if(presum==0) ans=max(ans,i+1);
            
            if(m.find(presum)!=m.end()){
                ans=max(ans,i-m[presum]);
            }
            
            if(m.find(presum)==m.end()){
                m[presum]=i;
            }
        }
        return ans;
}


A similar approach using bitmasking is used in the question :- 1371. Find the Longest Substring Containing Vowels in Even Counts

here we use bit masking , so we take a mask = 0 and we do changes in the bit of this mask using xor operation . so when we find 'a' , we do change in 0th bit ,
when we find 'b' , we do change in 1th bit and so on and then we do the same approach .


int findTheLongestSubstring(string s) {
        int n=s.size();
        int mask=0;
        int ans=0;
        unordered_map<int,int> m;
        m[0]=-1;
        for(int i=0;i<n;i++){
            if(s[i]=='a') mask^=(1<<0);
            else if(s[i]=='e') mask^=(1<<1);
            else if(s[i]=='i') mask^=(1<<2);
            else if(s[i]=='o') mask^=(1<<3);
            else if(s[i]=='u') mask^=(1<<4);

            if(m.find(mask)!=m.end()){
                ans=max(ans,i-m[mask]);
            }

            if(m.find(mask)==m.end()){
                m[mask]=i;
            }
        }
        return  ans;
}

